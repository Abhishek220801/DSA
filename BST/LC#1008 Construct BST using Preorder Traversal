https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/

class Solution {
public:
    TreeNode* helper(vector<int>& preorder, int st, int end){
        if(st>end) return NULL;
        TreeNode* root = new TreeNode(preorder[st]);
        int idx = st;
        for(idx = st; idx<=end; idx++){
            if(preorder[idx]>preorder[st]) break;
        }
        root->left = helper(preorder,st+1,idx-1);
        root->right = helper(preorder,idx,end);

        return root;
    }

    TreeNode* bstFromPreorder(vector<int>& preorder) {
        return helper(preorder,0,preorder.size()-1);
    }
};

//or
class Solution {
public:
    TreeNode* build(vector<int>& pre, int prelo, int prehi, vector<int>& in, int inlo, int inhi){
        if(inlo>inhi || prelo>prehi) return NULL;
        TreeNode* root = new TreeNode(pre[prelo]);
        int i=inlo;
        while(i<=inhi){
            if(in[i]==pre[prelo]) break;
            i++;
        }
        int leftCount = i-inlo, rightCount = inhi-i;
        root->left = build(pre, prelo+1, prelo+leftCount ,in ,inlo ,i-1);
        root->right = build(pre, prelo+leftCount+1, prehi ,in ,i+1 ,inhi);
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& pre) {
        vector<int> in = pre; //copy
        sort(in.begin(),in.end()); 
        int n = pre.size();
        return build(pre,0,n-1,in,0,n-1);
    }
};

//or
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(!root) return new TreeNode(val);
        if(root->val > val){
            if(root->left == NULL){
                root->left = new TreeNode(val);
                return root;
            }
            else insertIntoBST(root->left,val);
        }
        else{
            if(root->right == NULL){
                root->right = new TreeNode(val);
                return root;
            }
            else insertIntoBST(root->right,val);
        }
        return root;
    }

    TreeNode* bstFromPreorder(vector<int>& pre) {
        TreeNode* root = new TreeNode(pre[0]);
        for(int i=1; i<pre.size(); i++){
            insertIntoBST(root,pre[i]);
        }
        return root;
    }
};
