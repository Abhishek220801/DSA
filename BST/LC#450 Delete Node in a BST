https://leetcode.com/problems/delete-node-in-a-bst/

class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return NULL;
        if(root->val>key)
            root->left = deleteNode(root->left,key);
        else if(root->val<key)
            root->right = deleteNode(root->right,key);
        else{  // found the element to be deleted 
            if(!root->left) return root->right;
            else if(!root->right) return root->left;
            else{
                //both children are there 
                //one right and then left recursively -> successor -> min in right subtree
                TreeNode* succ = root->right;
                while(succ && succ->left) succ = succ->left;
                root->val = succ->val;
                root->right = deleteNode(root->right, succ->val);
            }
        }
        return root;
    }
};

//or
class Solution {
public:
    TreeNode* iop(TreeNode* root){
        if(!root->left) return NULL;
        TreeNode* pred = root->left;
        while(pred->right) pred = pred->right;
        return pred;
    }

    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return NULL;
        if(root->val==key){
            // Case 1: No child
            if(!root->left && !root->right) return NULL;
            // Case 2: 1 child
            if(!root->left || !root->right){
                if(root->left) return root->left;
                else return root->right;
            }
            // Case 3: 2 child nodes 
            else{
                // replace the root with its inorder pred
                TreeNode* pred = iop(root);
                root->val = pred->val;
                root->left = deleteNode(root->left,pred->val);
            }
        }
        else if(root->val>key){
            root->left = deleteNode(root->left,key);
        }
        else root->right = deleteNode(root->right,key);
        return root;
    }
};
