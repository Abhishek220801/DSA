https://leetcode.com/problems/unique-binary-search-trees-ii/

class Solution {
public:
    vector<TreeNode*> helper(int s, int e){
        vector<TreeNode*> res;
        if(s>e){
            res.push_back(NULL);
            return res;
        }

        if(s==e){
            res.push_back(new TreeNode(s));
            return res;
        }

        vector<TreeNode*> left, right;
        for(int rootVal=s; rootVal<=e; rootVal++){
            left = helper(s, rootVal-1);
            right = helper(rootVal+1, e);

            //root - 3, left => 1,2, right => 4,5
            TreeNode* root;
            for(TreeNode* lnode: left){
                for(TreeNode* rnode: right){
                    root = new TreeNode(rootVal);
                    root->left = lnode;
                    root->right = rnode; 
                    res.push_back(root);
                }
            }
        }
        return res;
    }

    vector<TreeNode*> generateTrees(int n) {
        return helper(1,n);
    }
};
