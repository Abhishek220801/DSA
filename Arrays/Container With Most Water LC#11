//brute force - O(N^2) - TLE

int maxArea(vector<int>& height) {
    int mostWater = 0;
    for(int i=0;i<height.size();i++){
        for(int j=i+1;j<height.size();j++){
            int w = j-i;
            int h = min(height[i],height[j]);
            int area = h*w;
            mostWater = max(area, mostWater);
        }
    }
    return mostWater;
}

//Optimized - Two Pointer Approach - O(N) 

int maxArea(vector<int>& height) {
    int mostWater = 0, i=0, j=height.size()-1;
    while(i<j){
        int w = j-i;
        int h = min(height[i],height[j]);
        int area = h*w;
        mostWater = max(mostWater, area);
        height[i]<height[j]?i++:j--; //lower height boundary will decide the amount of water stored in container, 
        //so better move the lower ht ptr instead of other which doesn't contribute anything to contained water
    }
    return mostWater;
}
