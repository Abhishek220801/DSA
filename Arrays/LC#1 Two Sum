//Pair Sum
//return pair of two from array which sums to target

https://leetcode.com/problems/two-sum/

// O(N^2) - Brute Force Approach 
vector<int> pairSum(vector<int> v, int target){
    int i=0, j = v.size()-1;
    vector<int> ans;
    while(i<j){
        int sum = v[i]+v[j];
        if(sum<target){
            i++;
        }
        else if(sum>target){
            j--;
        }
        else{
            ans.push_back(v[i]);
            ans.push_back(v[j]);
            return ans;
        }
    }
    return ans;
}

int main() {
    vector<int> v = {2,5,8,3,10,9};
    int target = 14;
    
    vector<int> ans = pairSum(v,target);
    
    cout<<ans[0]<<" "<<ans[1];

    return 0;
}

// Optimized - O(N)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        map<int,int> mp; // <num,idx>
        for(int i=0; i<n; i++){
            int rem = target - nums[i];
            if(mp.find(rem)!=mp.end()){
                return {i, mp[rem]};
            }
            mp[nums[i]] = i; 
        }
        return {};
    }
};
