https://leetcode.com/problems/find-the-duplicate-number/

//using sort STL method (not allowed in this problem)
//TC - O(N*log(N)) , SC - O(N)

void moveNegatives(vector<int>& nums){
    int l,h;
    l=0, h=nums.size()-1;
    while(l<h){
        if(nums[l]<0){
            l++;
        } else if(nums[h]>0){
            h--;
        }else{
            swap(nums[l],nums[h]);
        }
    }
}


//Optimal Approach - O(N)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        for(int i=0;i<nums.size();i++){
            int index = abs(nums[i]);
            if(nums[index]<0) return index;
            else nums[index]*=-1;
        }
        return -1;
    }
};

//even more optimized

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int ans = -1;
        for(int i=0;i<nums.size();i++){
            int index = abs(nums[i]);
            
            if(nums[index]<0){
                ans = index;
                break;
            } 
            //marking visited
            else nums[index]*=-1;
        }
        return ans;
    }
};

//Positioning Method - TC-O(N), SC-O(1)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        while(nums[0]!=nums[nums[0]]){
            swap(nums[0],nums[nums[0]]);
        }
        return nums[0];
    }
};
