https://leetcode.com/problems/subarray-sum-equals-k

// Brute force (checking and comparing with all the possible subarrays)
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        int count = 0;
        for(int i=0; i<n; i++){
            int sum = 0; 
            for(int j=i; j<n; j++){
                sum+=nums[j];
                if(sum==k) count++;
            }
        }
        return count;
    }
};

//using unordered-map for hashing TC-> O(n)
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        int count = 0;
        vector<int> prefixSum(n, 0);

        prefixSum[0] = nums[0];
        for(int i=1;i<n;i++){
            prefixSum[i] = prefixSum[i-1]+nums[i];
        }

        unordered_map<int,int> m; //PS, freq
        for(int j=0;j<n;j++){
            if(prefixSum[j]==k) count++;

            int val = prefixSum[j] - k;
            if(m.find(val)!=m.end()) count+=m[val];
            if(m.find(prefixSum[j])==m.end()) m[prefixSum[j]] = 0;
            m[prefixSum[j]]++;
        }
        return count;
    } 
};

// map -> cumulative sum 
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int,int> mp;
        int result = 0;
        int cumSum = 0;
        mp.insert({0, 1});

        for(int i=0; i<nums.size(); i++){
            cumSum+=nums[i];
            if(mp.find(cumSum-k)!=mp.end()){
                result+=mp[cumSum-k];
            }
            mp[cumSum]++;
        }

        return result;
    }
};
