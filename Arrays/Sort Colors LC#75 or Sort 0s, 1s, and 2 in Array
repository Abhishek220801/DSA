class Solution {
public:
    void sortColors(vector<int>& nums) {
        int zeros, ones, twos;
        zeros=ones=twos=0;
        for(int i=0;i<nums.size();i++){  //or while(m<=h)
            if(nums[i]==0) zeros++;
            else if(nums[i]==1) ones++;
            else twos++;
        }
        int i = 0;
        while(zeros--){
            nums[i]=0;
            i++;
        }
        while(ones--){
            nums[i]=1;
            i++;
        }
        while(twos--){
            nums[i]=2;
            i++;
        }
    }
};

//or 

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int zeros = 0, ones = 0, twos = 0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0) zeros++;
            else if(nums[i]==1) ones++;
            else twos++;
        }
        for(int i=0;i<nums.size();i++){
            if(i<zeros) nums[i] = 0;
            else if(i<(zeros+ones)) nums[i] = 1;
            else nums[i] = 2;
        }
        return;
    }
};


//In Place Efficient Memory Space Algorithm/Solution
//Dutch National Flag Algorithm 
//3 pointer algo - one pass algo

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int l,m,h;
        l=m=0, h=nums.size()-1;
        for(int i=0;i<nums.size();i++){  //or while(m<=h)
            if(nums[m]==0){
                swap(nums[l],nums[m]);
                l++;
                m++;
            } else if(nums[m]==1){
                m++;
            } else{
                swap(nums[m],nums[h]);
                h--;
            }
        }
    }
};
