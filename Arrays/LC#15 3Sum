https://leetcode.com/problems/3sum/

class Solution {
public:
    vector<vector<int>> res; /// global resultant vector

    void twoSum(vector<int> nums, int target, int i, int j){
        while(i<j){
            int sum = nums[i]+nums[j];
            if(sum<target) i++;
            else if(sum>target) j--;
            else{
                while(i<j && nums[i]==nums[i+1]) i++; // again remove duplicates
                while(i<j && nums[j]==nums[j-1]) j--; // " " 
                res.push_back({-target,nums[i],nums[j]}); // populate res
                i++;
                j--;
            }
        }
    }

    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        res.clear();
        // sort
        sort(nums.begin(),nums.end());
        // fixing n1
        for(int i=0; i<=n-3; i++){               // since triplet is to be found
            if(i>0 && nums[i]==nums[i-1]) continue;  // can't check i-1 for 0th i case
            int n1 = nums[i]; 
            int target = -n1; // n2 + n3 = -(n1) (3Sum expression re-arrangement)

            twoSum(nums,target,i+1,n-1);
        }
        return res;
    }
};
