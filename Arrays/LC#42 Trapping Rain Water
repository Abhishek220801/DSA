https://leetcode.com/problems/trapping-rain-water/

//Not very optimal space-wise -> used 3 separate arrays/vectors
class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        //prev greatest element array
        vector<int> prev(n);
        prev[0] = -1;
        int max = height[0];
        for(int i=1; i<n; i++){
            prev[i] = max;
            if(max<height[i]) max = height[i];
        } 
        //next greatest element array
        vector<int> next(n);
        next[n-1] = -1;
        int maxi = height[n-1];
        for(int i=n-2;i>=0;i--){
            next[i] = maxi;
            if(maxi<height[i]) maxi = height[i];
        }
        //minimum array
        vector<int> mini(n);
        for(int i=0;i<n;i++){
            mini[i] = min(prev[i],next[i]);
        }
        int water = 0;
        for(int i=1;i<n;i++){
            if(height[i]<mini[i]){
                water += mini[i]-height[i];
            }
        }
        return water;
    }
};


//Optimal solution

class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        //prev greatest element array
        vector<int> prev(n);
        prev[0] = -1;
        int max = height[0];
        for(int i=1; i<n; i++){
            prev[i] = max;
            if(max<height[i]) max = height[i];
        } 
        //next greatest element array
        prev[n-1] = -1;
        max = height[n-1];
        for(int i=n-2;i>=0;i--){
            if(max<prev[i]) prev[i] = max;
            if(max<height[i]) max = height[i];
        }
        int water = 0;
        for(int i=1;i<n;i++){
            if(height[i]<prev[i]){
                water += prev[i]-height[i];
            }
        }
        return water;
    }
};

// Optimized approach#2
class Solution {
public:
    vector<int> getLeftMaxArray(vector<int>& height, int& n){
        vector<int> leftMax(n);
        leftMax[0] = height[0];
        for(int i=1; i<n; i++){
            leftMax[i] = max(leftMax[i-1],height[i]);
        }
        return leftMax;
    }
    vector<int> getRightMaxArray(vector<int>& height, int& n){
        vector<int> rightMax(n);
        rightMax[n-1] = height[n-1];
        for(int i=n-2; i>=0; i--){
            rightMax[i] = max(rightMax[i+1],height[i]);
        }
        return rightMax;
    }

    int trap(vector<int>& height) {
        int n = height.size();
        vector<int> leftMax = getLeftMaxArray(height,n);
        vector<int> rightMax = getRightMaxArray(height,n);
    
        int ans = 0;
        for(int i=1; i<n-1; i++){
            int cw = min(leftMax[i],rightMax[i])-height[i];
            ans+=cw;
        }
        return ans;
    }
};
