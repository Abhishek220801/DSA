https://leetcode.com/problems/number-of-submatrices-that-sum-to-target

class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int m = matrix.size(), n = matrix[0].size();
        int count = 0;
        for(int s_r=0; s_r<m; s_r++){
            for(int s_c=0; s_c<n; s_c++){
                for(int e_r=s_r; e_r<m; e_r++){
                    for(int e_c=s_c; e_c<n; e_c++){
                        int sum = 0;
                        for(int i=s_r; i<=e_r; i++){
                            for(int j=s_c; j<=e_c; j++){
                                sum+=matrix[i][j];
                            }
                        }
                        if(sum==target) count++;
                    }
                }
            }
        }
        return count;
    }
};


// Optimal solution
class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size(), cols = matrix[0].size();
        int result = 0;
        
        //take row-wise cumulative sum 
        for(int row=0; row<rows; row++){
            for(int col=1; col<cols; col++){
                matrix[row][col] += matrix[row][col-1];
            }
        }

        // now find subarrays with sum==target - downwards direction
        for(int startCol=0; startCol<cols; startCol++){
            
            for(int j = startCol; j<cols; j++){
                unordered_map<int,int> mp;
                mp.insert({0,1});
                int cumSum = 0;

                for(int row=0; row<rows; row++){
                    cumSum += matrix[row][j] - (startCol > 0 ? matrix[row][startCol-1] : 0);

                    if(mp.find(cumSum-target) != mp.end()){
                        result += mp[cumSum-target];
                    }

                    mp[cumSum]++;
                }
            }
        }
        
        return result;
    }
};
