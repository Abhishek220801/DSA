class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        this->next = NULL;
    }
    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
};

class Queue
{
public:
    Node *head;
    Node *tail;
    int s;
    Queue()
    {
        head = tail = NULL;
        s = 0;
    }
    void push(int val)
    {
        Node *temp = new Node(val);
        if (s == 0)
        {
            head = tail = temp;
        }
        else
        {
            tail->next = temp;
            tail = temp;
        }
        s++;
    };

    void pop()
    {
        if (s == 0)
        {
            cout << "Underflow error";
        }
        Node *temp = head;
        head = head->next;
        delete temp;
        s--;
    }
    int front()
    {
        if (s == 0)
            return -1;
        return head->data;
    };
    int back()
    {
        if (s == 0)
            return -1;
        return tail->data;
    };
    int size()
    {
        return s;
    };
    bool empty()
    {
        if (s == 0)
            return true;
        else
            return false;
    }
    void display()
    {
        if (s==0)
        {
            cout << "LL is empty";
        }
        else if (s==1)
        {
            cout << head->data;
        }
        Node *temp = head;
        while (temp)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    };
};
