class Solution {
private:
    bool isValid(int row, int col, vector<string>& board, int n){
        //verctically - up
        for(int r=row;r>=0;r--){
            if(board[r][col]=='Q') return false;
        }
        //diagonally - top left
        for(int r=row,c=col;r>=0&&c>=0;r--,c--){
            if(board[r][c]=='Q') return false;
        }
        //diagonally - top right
        for(int r=row,c=col;r>=0&&c<n;r--,c++){
            if(board[r][c]=='Q') return false;
        }
        return true;
    }
    void helper(int row, vector<vector<string>>& res, vector<string>& board, int n){
        //terminating condition 
        if(row==n){
            res.push_back(board);
            return;
        }

        for(int col=0;col<n;col++){
            if (isValid(row,col,board,n)){
                board[row][col]='Q';
                helper(row+1,res,board,n);
                board[row][col]='.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res;
        vector<string> board(n);
        string s(n,'.');
        for(int i=0;i<n;i++){
            board[i]=s;
        }
        helper(0,res,board,n);
        return res;
    }
};
