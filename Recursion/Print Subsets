void printSubset(string s, string curr){
    if(s.length()==0){
        cout<<curr<<endl;
        return;
    }
    char ch = s[0];
    printSubset(s.substr(1),curr+ch);
    printSubset(s.substr(1),curr);
}

// using index 
void printSubsets(string s, string curr, int i){
    if(s.length()==i){
        cout<<curr<<endl;
        return;
    }
    printSubsets(s,curr,i+1);
    curr.push_back(s[i]);
    printSubsets(s,curr,i+1);
}

// store in vector 

void printSubset(string s, string curr, vector<string>& res){
    if(s.length()==0){
        res.push_back(curr);
        return;
    }
    char ch = s[0];
    printSubset(s.substr(1),curr+ch,res);
    printSubset(s.substr(1),curr,res);
}

// of Array / Vector 

void printSubsetsV(vector<int>& v, vector<int>& curr, int idx){
    if(idx == v.size()){
        for(int i: curr){
            cout<<i<<" ";
        }
        cout<<endl;
        return;
    }
    curr.push_back(v[idx]);
    printSubsetsV(v,curr,idx+1);
    curr.pop_back();
    printSubsetsV(v,curr,idx+1);
}
//or
void printSubset(int arr[], int idx, int n, vector<int> curr){
    if(idx==n){
        for(int el: curr){
            cout<<el<<" ";
        }
        cout<<endl;
        return;
    }
    printSubset(arr,idx+1,n,curr);
    curr.push_back(arr[idx]);
    printSubset(arr,idx+1,n,curr);
}
