https://leetcode.com/problems/n-queens/description/

//row-wise Solution 
class Solution {
public:
    bool isSafe(vector<string>& board, int row, int col, int n){
        // horizontal
        for(int j=0; j<n; j++){
            if(board[row][j] == 'Q') return false;
        }
        // vertical
        for(int j=0; j<n; j++){
            if(board[j][col] == 'Q') return false;
        }
        // left diagonal
        for(int i=row, j=col; i>=0 && j>=0; i--, j--){
            if(board[i][j] == 'Q') return false;
        }
        // right diagonal
        for(int i=row, j=col; i>=0 && j<n; i--, j++){
            if(board[i][j] == 'Q') return false;
        }        
        return true;
    }

    void nQueens(vector<string> &board, int row, int n, vector<vector<string>> &ans){
        if(row==n){
            ans.push_back({board});
            return;
        }
        for(int j=0; j<n; j++){
            if(isSafe(board,row,j,n)){
                board[row][j] = 'Q';
                nQueens(board,row+1,n,ans);
                board[row][j] = '.';
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<string> board(n, string(n, '.'));
        vector<vector<string>> ans;

        nQueens(board, 0, n, ans);
        return ans;
    }
};


//column-wise Solution 
class Solution {
private:
    bool isValid(int row, int col, vector<string>& board, int n){
        //horizontally - left
        for(int c=col;c>=0;c--){
            if(board[row][c]=='Q') return false;
        }
        //diagonally - top left
        for(int r=row,c=col;r>=0&&c>=0;r--,c--){
            if(board[r][c]=='Q') return false;
        }
        //diagonally - bottom left
        for(int r=row,c=col;r<n&&c>=0;r++,c--){
            if(board[r][c]=='Q') return false;
        }
        return true;
    }
    void helper(int col, vector<vector<string>>& res, vector<string>& board, int n){
        //terminating condition 
        if(col==n){
            res.push_back(board);
            return;
        }

        for(int row=0;row<n;row++){
            if (isValid(row,col,board,n)){
                board[row][col]='Q';
                helper(col+1,res,board,n);
                board[row][col]='.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res;
        vector<string> board(n);
        string s(n,'.');
        for(int i=0;i<n;i++){
            board[i]=s;
        }
        helper(0,res,board,n);
        return res;
    }
};
