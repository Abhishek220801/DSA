https://leetcode.com/problems/unique-binary-search-trees-ii/

// TC -> O(leftRes*rightRes)

class Solution {
public:
    vector<TreeNode*> helper(int s, int e){
        vector<TreeNode*> res;
        vector<TreeNode*> leftRes, rightRes;

        if(s>e){
            res.push_back(NULL);
            return res;
        };

        if(s==e){
            res.push_back(new TreeNode(s));
            return res;
        }

        for(int rootVal = s; rootVal<=e; rootVal++){
            leftRes = helper(s, rootVal-1);
            rightRes = helper(rootVal+1, e);

            for(TreeNode* lnode: leftRes){
                for(TreeNode* rnode: rightRes){
                    TreeNode* root = new TreeNode(rootVal);
                    root->left = lnode;
                    root->right = rnode;
                    res.push_back(root);
                }
            }
        }
        return res;
    }

    vector<TreeNode*> generateTrees(int n) {
        return helper(1, n);
    }
};
