https://leetcode.com/problems/binary-tree-right-side-view/

class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> ans;
        if(!root) return ans;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int n = q.size();
            int lastNode;
            for(int i=0; i<n; i++){
                TreeNode* temp = q.front();
                q.pop();
                if(temp->left) q.push(temp->left);
                if(temp->right) q.push(temp->right);
                lastNode = temp->val;
            }
            ans.push_back(lastNode);
        }
        return ans;
    }
};

// or 
class Solution {
public:
    int levels(TreeNode* root){
        if(!root) return 0;
        return 1+max(levels(root->left),levels(root->right));
    }

    void nthLevel(TreeNode* root, int level, int n, vector<int>& ans){
        if(root==NULL) return;
        if(level==n){
            ans[level] = root->val;
            return; // to avoid further calls which are unnecessary and make the code unoptimized 
        }
        nthLevel(root->left,level+1,n,ans);
        nthLevel(root->right,level+1,n,ans);
    }

    void levelOrder(TreeNode* root, vector<int>& ans){
        int n = ans.size();
        for(int i=0; i<n; i++){
            nthLevel(root,0,i,ans);
            cout<<endl;
        }
    }

    vector<int> rightSideView(TreeNode* root) {
        vector<int> ans(levels(root),0);
        levelOrder(root,ans);
        return ans;
    }
};

//or
class Solution {
public:
    int levels(TreeNode* root){
        if(!root) return 0;
        return 1+max(levels(root->left),levels(root->right));
    }

    void preorder(TreeNode* root, vector<int>& ans, int level){
        if(!root) return;
        ans[level] = root->val;
        preorder(root->left,ans,level+1);
        preorder(root->right,ans,level+1);
    }

    vector<int> rightSideView(TreeNode* root) {
        vector<int> ans(levels(root),0);
        preorder(root,ans,0);
        return ans;
    }
};


