https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal

class Solution {
    private: 
        TreeNode* helper(vector<int>& inorder, int in_st, int in_end, vector<int>& postorder, int post_st, int post_end, unordered_map<int, int> &m){
            if(in_st>in_end || post_st>post_end) return NULL;
            TreeNode* root = new TreeNode(postorder[post_end]);
            int root_in_idx = m[root->val];
            int nums_in_left = root_in_idx-in_st;

            root->left = helper(inorder, in_st, in_st+nums_in_left-1, postorder, post_st, post_st+nums_in_left-1,m);
            root->right = helper(inorder, in_st+nums_in_left+1, in_end, postorder, post_st+nums_in_left, post_end-1,m);
        return root;
        };
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int s = inorder.size();
        unordered_map<int, int> m;
        for(int i=0; i<s; i++){
            m[inorder[i]] = i;
        }
        return helper(inorder, 0, s-1, postorder, 0, s-1, m);
    }
};
