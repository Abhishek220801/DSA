//Brute-force
// O(N^2) T, O(N) S

class Solution {
  public:
    vector<int> nextLargerElement(vector<int>& arr) {
        // code here
        int n = arr.size();
        if(n==1) return arr;
        vector<int> ans(n, -1);
        
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(arr[j]>arr[i]){
                    ans[i] = arr[j];
                    break;
                }
            }
        }
        return ans;
    }
};

//Optimized - using Stack (pop, ans/mark, push) & reverse traversal 
//O(N) ST

stack<int> st;
    
    int nge[n];
    nge[n-1] = -1;
    st.push(arr[n-1]);
    
    for(int i=n-2; i>=0; i--){
        //pop all the stack elements smaller than arr[i]
        
        //pop
        while(st.size()>0 && st.top()<=arr[i]) st.pop();
        
        //mark the ans in nge array
        if(st.empty()) nge[i] = -1;
        else nge[i] = st.top();
        
        //push the arr[i]
        st.push(arr[i]);
    }
    
