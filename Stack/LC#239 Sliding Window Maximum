https://leetcode.com/problems/sliding-window-maximum/

//Brute Force (gives TLE)
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> nge;
        for(int i=0; i<n-k+1; i++){
            int mx = INT_MIN;
            for(int j=i; j<i+k; j++){
                mx = max(mx, nums[j]);
            }
            nge.push_back(mx);
        }
        return nge;
    }
};

//Optimized -> O(N) ST

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> ngi(n);
        stack<int> st;
        ngi[n-1] = n;
        st.push(n-1);
        for(int i=n-2;i>=0;i--){
            while(!st.empty() && nums[st.top()]<=nums[i]) st.pop();
            if(st.size()==0) ngi[i] = n;
            else ngi[i] = st.top();
            st.push(i);
        }
        vector<int> ans;
        int j = 0;
        for(int i=0; i<n-k+1;i++){
            int mx = nums[i];
            if(j<i) j = i;
            while(j<i+k){
                mx = nums[j];
                if(ngi[j]>=i+k) break;
                j = ngi[j];
            }
            ans.push_back(mx);
        }
        return ans;
    }
};
