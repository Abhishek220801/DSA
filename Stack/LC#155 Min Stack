https://leetcode.com/problems/min-stack/

# M1 -> using a vector of pair of value and minimum till now value in stack (since constant time op is needed)

class MinStack {
public:
    stack<pair<int,int>> s;
    MinStack() {
        
    }
    
    void push(int val) {
        if(s.empty()) s.push({val,val});
        else{
            int minVal = min(val,s.top().second);
            s.push({val,minVal});
        }
    }
    
    void pop() {
        s.pop();
    }
    
    int top() {
        return s.top().first;
    }
    
    int getMin() {
        return s.top().second;
    }
};


# M2 -> slightly better space complexity using a clever trick 

class MinStack {
public:
    stack<long long> s;
    long long minVal;
    MinStack() {
        
    }
    
    void push(int val) {
        if(s.empty()) {
            s.push(val);
            minVal = val;
        } else{
            if(val>=minVal){
                s.push(val);
            } else{
                s.push(2LL * val - minVal);
                minVal = val;
            }
        }
    }
    
    void pop() {
        if(s.empty()) return;

        long long top = s.top();
        s.pop();

        if(top<minVal){
            minVal = 2LL * minVal - top;
        }
    }
    
    int top() {
        if(s.empty()) return -1;

        long long top = s.top();

        if(top<minVal){
            return (int)minVal;
        } else{
            return (int)top;
        }
    }
    
    int getMin() {
        return (int)minVal;
    }
};

# M3 -> using a vector implementation of stack

class MinStack {
public:
    vector<int> v;
    MinStack() {
        
    }
    
    void push(int val) {
        v.push_back(val);
    }
    
    void pop() {
        v.pop_back();
    }
    
    int top() {
        return v[v.size()-1];
    }
    
    int getMin() {
        int mn = v[0];
        for(int i=0;i<v.size();i++){
            mn = min(mn, v[i]);
        }
        return mn;
    }
};



