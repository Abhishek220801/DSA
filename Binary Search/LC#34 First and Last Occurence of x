https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int s = 0, e = nums.size()-1, fo = -1, lo = -1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(target<nums[mid]) e = mid-1;
            else if(target>nums[mid]) s = mid+1;
            else{
                fo = mid;
                e = mid-1;
            }
        }
        if(fo==-1) return {-1,-1};  //optimization - last occ cannot exist without a first occ
        s = 0, e = nums.size()-1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(target<nums[mid]) e = mid-1;
            else if(target>nums[mid]) s = mid+1;
            else{
                lo = mid;
                s = mid+1;
            }
        }
        return {fo,lo};
    }
};

//OR
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        vector<int> res;
        if(n==0) return {-1,-1};
        if(n==1){
            if(nums[0]==target){
                return {0,0};
            }
        }
        int lo = 0, hi = n-1, mid, f = -1, l = -1;
        while(lo<=hi){
            mid = lo + (hi-lo)/2;
            if(target==nums[mid]){
                f = mid;
                hi = mid-1;
            }
            else if(target<nums[mid]){
                hi = mid-1;
            }
            else lo = mid+1;
        }
        if(f==-1) return {-1,-1};
        res.push_back(f);
        lo = 0, hi = n-1;
        while(lo<=hi){
            mid = lo + (hi-lo)/2;
            if(target==nums[mid]){
                l = mid;
                lo = mid+1;
            }
            else if(target<nums[mid]){
                hi = mid-1;
            }
            else lo = mid+1;
        }
        res.push_back(l);
        return res;
    }
};
