// Recursive 
int binSearchDes(int arr[], int x, int s, int e){
    while(s<e){
        int mid =  s+(e-s)/2;
        if(arr[mid]==x){
            return mid;
        }
        else if(x<arr[mid]){
            return binSearch(arr,x,mid+1,e);
        } else{
            return binSearch(arr,x,s,mid-1);
        }
    }
    return -1;
}

// Iterative 
int main(){

    int arr[] = {18, 13, 11, 9, 8, 5 ,3 ,2, 0};
    int target = 5;

    int n = sizeof(arr)/sizeof(arr[0]);
    int lo = 0, hi = n-1, mid;
    bool flag = false;

    while(lo<=hi){
        mid = lo + (hi-lo)/2;
        if(target==arr[mid]){
            flag = true;
            cout<<"Element present at "<<mid+1<<" position in array.";
            break;
        }
        else if(target<arr[mid]) lo = mid+1;
        else hi = mid-1;
    }
    if(!flag) cout<<"Element not found";

    return 0;
}
