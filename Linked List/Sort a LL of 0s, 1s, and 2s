##Approach1: By maintaining frequency - O(N) Time and O(1) Space

void sortZOTs(Node* &head){
    //Step1: Counting occurrences of each
    int zero = 0, one = 0, two = 0;
    
    Node* temp = head;
    while(temp!=NULL){
        if(temp->data==0) zero++;
        else if(temp->data==1) one++;
        else two++;
        temp = temp->next;
    }
    
    //Step2: Fill 0, 1, and 2s in the OG LL
    temp = head;
    while(zero--){
        temp->data = 0;
        temp = temp->next;
    }
    while(one--){
        temp->data = 1;
        temp = temp->next;
    }
    while(two--){
        temp->data = 2;
        temp = temp->next; 
    }
}

## Approach 2: By changing/manipulating links/pointers

Node* sort2(Node* head){
    if(!head && !(head->next)) return head;
    
    //Creating dummy nodes
    Node* zeroD = new Node(-1);
    Node* oneD = new Node(-1);
    Node* twoD = new Node(-1);
    
    //Initialize current pointers for three lists
    Node* zero = zeroD, *one = oneD, *two = twoD;
    
    //Traverse the list
    Node* curr = head;
    while(curr!=NULL){
        if(curr->data == 0){
            //data of curr if 0, append it to to ptr one and update one
            zero->next = curr;
            zero = zero->next;
        }
        else if(curr->data == 1){
            one->next = curr;
            one = one->next;
        }
        else{
            two->next = curr;
            two = two->next;
        }
        curr = curr->next;
    }
    //Combine the three lists 
    if(oneD->next)
        zero->next = oneD->next;
    else
        zero->next = twoD->next;
    
    one->next = twoD->next;
    two->next = NULL;
    
    //Updated head
    head = zeroD->next;
    
    delete zeroD;
    delete oneD;
    delete twoD;
    
    return head;
}
