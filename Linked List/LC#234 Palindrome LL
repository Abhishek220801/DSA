https://leetcode.com/problems/palindrome-linked-list/description/

bool isPalindrome(Node* &head){
    if(head==NULL || head->next ==NULL){
        return true; //an empty or single-element list is a palindrome
    }
    
    //Step 1: find middle node using slow and fast pointers
    Node* slow = head;
    Node* fast = head;
    
    //move slow to the middle, fast to the end 
    while(fast!= NULL){
        fast = fast->next;
        if(fast!=NULL){
            fast = fast->next;
            slow = slow->next;
        }
    }
    
    //Step 2: Reverse the second half of the list
    Node* prev = NULL;
    Node* curr = slow;
    while(curr){      //other way of saying while(curr!=NULL)
        Node* nextNode = curr->next;
        curr->next = prev;
        prev = curr;
        curr = nextNode;
    }
    
    //Step 3: Compare the first and second halves of the list
    Node* temp1 = head;
    Node* temp2 = prev;
    while(temp2!=NULL){
        if(temp1->data != temp2->data){
            return false;  //data didn't match, not palindrome
        }
        temp1 = temp1 ->next;
        temp2 = temp2 -> next;
    } 
    return true; //if all values matches, it's a palindrome
}



// OR 

bool isPalindrome(ListNode* head) {
        if(head->next==NULL) return 1;
        ListNode* temp = head;
        int count = 0;
        while(temp){
            count++;
            temp = temp->next;
        }
        count/=2;

        ListNode *curr = head, *prev = NULL;

        while(count--){
            prev = curr;
            curr = curr->next;
        }
        prev->next = NULL;
        prev = NULL;
        ListNode* front = NULL;
        while(curr){
            front = curr->next;
            curr->next = prev;
            prev = curr;
            curr = front; 
        }
        ListNode* head1 = head, *head2 = prev;
        while(head1){
            if(head1->val!=head2->val) return 0;
            head1 = head1->next;
            head2 = head2->next;
        }
        return 1;
    }
