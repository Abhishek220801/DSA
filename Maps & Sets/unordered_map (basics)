#include <iostream>
#include<unordered_map>
using namespace std;

int main() {
    // Declaration
    unordered_map<string,int> ages;

    // Insertion
    ages["Abhishek"] = 24; 
    ages.insert({"Charlie",35}); 
    
    // Accessing particular elements 
    cout<<"Abhishek's age: "<<ages["Abhishek"]<<endl;
    // Accessing all elements in the map
    for(const auto &x: ages){
        cout<<x.first<<": "<<x.second<<endl;
    }
    
    // Delete an element 
    ages.erase("Charlie");
    
    // Size
    cout<<"Size of ages map: "<<ages.size();

    return 0;
}


/*
• Time Complexity: 
	• Average Case: O(1) for insertion, deletion, and search. 
	• Worst Case: O(N) in rare scenarios (e.g., hash collisions leading to a poorly distributed hash table), where N is the number of elements. 

• Use Cases: unordered_map is ideal when you need fast lookups and insertions and the order of elements is not a concern. It's commonly used for tasks like frequency counting, caching, and implementing symbol tables. 
*/

