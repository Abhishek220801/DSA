//Recursive -> TLE 

class Solution {
public:
    int helper(string& s1, string& s2, int ind1, int ind2){
        //base case
        if(ind1>=s1.length()) return s2.length()-ind2;
        if(ind2>=s2.length()) return s1.length()-ind1;
        //if chars same 
        if(s1[ind1]==s2[ind2])
            return helper(s1,s2,ind1+1,ind2+1);
        //if chars different
        return 1+min({helper(s1,s2,ind1+1,ind2+1),helper(s1,s2,ind1+1,ind2),helper(s1,s2,ind1,ind2+1)});
    }
    int minDistance(string word1, string word2) {
        return helper(word1,word2,0,0);
    }
};


//Memoization

class Solution {
public:
    int helper(string& s1, string& s2, int ind1, int ind2, vector<vector<int>>& dp){
        //base case
        if(ind1>=s1.length()) return s2.length()-ind2;
        if(ind2>=s2.length()) return s1.length()-ind1;
        //if already calculated 
        if(dp[ind1][ind2]!=-1) 
            return dp[ind1][ind2];
        //if chars same 
        if(s1[ind1]==s2[ind2])
            return dp[ind1][ind2]=helper(s1,s2,ind1+1,ind2+1,dp);
        //if chars diff
        return dp[ind1][ind2]=1+min({helper(s1,s2,ind1+1,ind2+1,dp),helper(s1,s2,ind1+1,ind2,dp),helper(s1,s2,ind1,ind2+1,dp)});
    }
    int minDistance(string word1, string word2) {
        int n = word1.length(), m = word2.length();
        vector<vector<int>> dp(n, vector<int> (m, -1));
        return helper(word1,word2,0,0,dp);
    }
};


//Bottom Up 

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.length(), m = word2.length();
        vector<vector<int>> dp(n+1, vector<int> (m+1, 0));
        for(int i=0;i<=n;i++)
            dp[i][0] = i;
        for(int j=0;j<=m;j++)
            dp[0][j] = j;
        for(int i=1;i<=n;i++){
            for(int j =1;j<=m;j++){
                //if chars same 
                if(word1[i-1]==word2[j-1])
                    dp[i][j] = dp[i-1][j-1];
                else
                    dp[i][j] = 1+min({dp[i-1][j-1],dp[i][j-1],dp[i-1][j]});
            }
        }
        return dp[n][m];
    }
};


//Space Optimization

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.length(), m = word2.length();
        //if one of the 2 strings is empty, then return length of the other string since we'll need that many operations 
        if(n==0) return m;
        vector<int> prev(m+1,0);
        vector<int> curr(m+1,0);
        for(int j=0;j<=m;j++)
            prev[j] = j;
        for(int i=1;i<=n;i++){
            //update 1st col of every row on each iteration
            curr[0] = i;
            for(int j =1;j<=m;j++){
                //if chars same 
                if(word1[i-1]==word2[j-1])
                    curr[j] = prev[j-1];
                else
                    curr[j] = 1+min({prev[j-1],curr[j-1],prev[j]});
            }
            prev = curr;
        }
        return curr[m];
    }
};
