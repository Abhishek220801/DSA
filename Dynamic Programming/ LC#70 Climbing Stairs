https://leetcode.com/problems/climbing-stairs

// Brute Force 
class Solution {
public:
    int climbStairs(int n) {
        if(n<0) return 0;
        if(n==0) return 1;
        return climbStairs(n-1)+climbStairs(n-2);
    }
};


//Memoization 
class Solution {
public:
    int helper(vector<int>& dp, int n){
        if(n<=2) return n;
        if(dp[n]!=-1) return dp[n];
        return dp[n]=helper(dp,n-1)+helper(dp,n-2);
    }

    int climbStairs(int n) {
        if(n<=2) return n;
        vector<int> dp(n+1,-1);
        helper(dp,n);
        return dp[n];
    }
};


//Bottom Up  
class Solution {
public:
    int climbStairs(int n) {
        if (n <= 2) return n;

        vector<int> dp(n+1,-1);
        dp[1]=1; dp[2]=2;
    
        for (int i = 3; i <= n; ++i)
            dp[i]=dp[i-1]+dp[i-2];
        return dp[n];
    }
}


//Space Optimization 
class Solution {
public:
    int climbStairs(int n) {
        if(n<=2) return n;
        int prev1 = 1, prev2 = 2, ans;
        for(int i=3;i<=n;i++){
            ans = prev1+prev2;
            prev1 = prev2;
            prev2 = ans;
        }
            
        return ans;
    }
};

