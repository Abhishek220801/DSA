/*TLE Eliminated
Time => O(n) (since no repeated calls)
Space => O(n) by Recursive Stack + O(n) by the storing vector or data structure => 2*O(n) => O(n)
*/

class Solution {
public:
    int helper(vector<int>& dp, int ind){
        if(dp[ind]!=-1) return dp[ind];
        if(ind<=1) return dp[ind]=ind;
        return dp[ind] = helper(dp,ind-1)+helper(dp,ind-2);
    }
    int fib(int n) {
        vector<int> dp(n+1,-1);
        helper(dp,n);
        return dp[n];
    }
};
