//Memoization - directly since caching the results is necessary 

//row-wise filling 
class Solution {
public:

    int helper(string& s, int i, int j, vector<vector<int>>& dp){
        if(j<i) return false;
        if(i==j) return dp[i][j] = true;

        if(dp[i][j] != -1) return dp[i][j];

        helper(s, i+1, j, dp);
        helper(s, i, j-1, dp);

        if(s[i] == s[j] && (j==i+1 || helper(s,i+1,j-1,dp))){
            return dp[i][j] = true;
        }
        return dp[i][j] = false;
    }

    int countSubstrings(string s) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int> (n, -1));
        helper(s, 0, n-1, dp);
        int res = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(dp[i][j]==1) res++;
            }
        }
        return res;
    }
};

//diagonal-wise filling of 2D dp (GAP Method/Stategy)
class Solution {
public:

    int helper(string& s, int i, int j, vector<vector<int>>& dp){
        if(j<i) return false;
        if(i==j) return dp[i][j] = true;

        if(dp[i][j] != -1) return dp[i][j];

        helper(s, i+1, j, dp);
        helper(s, i, j-1, dp);

        if(s[i] == s[j] && (j==i+1 || helper(s,i+1,j-1,dp))){
            return dp[i][j] = true;
        }
        return dp[i][j] = false;
    }

    int countSubstrings(string s) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int> (n, -1));
        helper(s, 0, n-1, dp);
        int res = 0;
        for(int l=1;l<=n;l++){
            for(int i=0;i<=n-l;i++){
                int j = i+l-1;
                if(dp[i][j]==1) res++;
            }
        }
        return res;
    }
};

//Bottom Up DP (Gap)

class Solution {
public:
    int countSubstrings(string s) {
        int n = s.length();
        vector<vector<bool>> dp(n, vector<bool> (n, false));
        int res = 0;

        for(int l=1;l<=n;l++){
            for(int i=0;i<=n-l;i++){
                int j = i+l-1;
                //single char
                if(i==j) dp[i][j]=true;
                //two chars 
                else if(j == i+1) dp[i][j] = (s[i]==s[j]);
                //more chars 
                else if(s[i]==s[j]) 
                    dp[i][j] = dp[i+1][j-1];
                if(dp[i][j]) res++;
            }
        }
        return res;
    }
};
