// Top Down aka Memoization 

class Solution {
public:
    int helper(vector<int>& dp, int ind){
        if (ind<=1) return ind;
        if(ind==2) return 1;
        if(dp[ind]!=-1) return dp[ind];
        return dp[ind]=helper(dp,ind-1)+helper(dp,ind-2)+helper(dp,ind-3);
    }
    int tribonacci(int n) {
        if(n<=1) return n;
        vector<int> dp(n+1,-1);
        helper(dp,n);
        return dp[n];
    }
};

//Bottom Up DP

class Solution {
public:
    int tribonacci(int n) {
        if(n<=1) return n;
        vector<int> dp(n+1,-1);
        dp[0]=0, dp[1]=dp[2]=1;
        for(int i=3;i<=n;i++)
            dp[i]=dp[i-1]+dp[i-2]+dp[i-3];
        return dp[n];
    }
};
