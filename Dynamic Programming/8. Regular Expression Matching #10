//Recursion (no TLE)

class Solution {
    bool helper(string& s, string& p, int i, int j){
        //base conditions

        //both empty
        if(i<0 && j<0) return true;
        //pattern empty string not 
        if(j<0 && i>=0) return false;
        //string empty pattern not 
        if(i<0 && j>=0){
            if(p[j]=='*') return helper(s,p,i,j-2);
        else return false;
        }


        //chars match 
        if(s[i]==p[j] || p[j]=='.')
            return helper(s,p,i-1,j-1);
        //*
        if(p[j]=='*'){
            if(helper(s,p,i,j-2))
                return true;
            if(s[i]==p[j-1] || p[j-1]=='.')
                return helper(s,p,i-1,j);
            else return false;
        }

//Memoization 

class Solution {
    bool helper(string& s, string& p, int i, int j, vector<vector<int>>& dp){
        //base conditions

        //both empty
        if(i<0 && j<0) return true;
        //pattern empty string not 
        if(j<0 && i>=0) return false;
        //string empty pattern not 
        if(i<0 && j>=0){
            if(p[j]=='*') return helper(s,p,i,j-2,dp);
        else return false;
        }

        if(dp[i][j]!=-1) return dp[i][j];

        //chars match 
        if(s[i]==p[j] || p[j]=='.')
            return dp[i][j]=helper(s,p,i-1,j-1,dp);
        //*
        if(p[j]=='*'){
            if(helper(s,p,i,j-2,dp))
                return dp[i][j]=true;
            if(s[i]==p[j-1] || p[j-1]=='.')
                return dp[i][j]=helper(s,p,i-1,j,dp);
            else return dp[i][j] = false;
        }
        return dp[i][j] = false;
    }
public:
    bool isMatch(string s, string p) {
        vector<vector<int>>dp (s.size(), vector<int> (p.size(), -1));
        return helper(s,p,s.size()-1,p.size()-1,dp);
    }
};
        return false;
    }
public:
    bool isMatch(string s, string p) {
        return helper(s,p,s.size()-1,p.size()-1);
    }
};
