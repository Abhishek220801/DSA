//Recursive (TLE)

class Solution {
public:
    bool helper(vector<int>& nums, int target, int ind){
        if(ind>=nums.size()) return target==0;
        
        if(helper(nums,target-nums[ind],ind+1)&&nums[ind]<=target)
            return true;
        if(helper(nums,target,ind+1))
            return true;
        return false;
    }
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for(int num: nums)
            sum+=num;
        
        if(sum%2!=0) return false;
        int target = sum/2;

        return helper(nums,target,0);
    }
};


//Memoization 

class Solution {
public:
    bool helper(vector<int>& nums, int target, int ind, vector<vector<int>>& dp){
        if(ind >= nums.size()) return (target == 0);

        if(dp[ind][target] != -1) // Check if already computed
            return dp[ind][target];
        
        if(nums[ind] <= target && helper(nums, target - nums[ind], ind + 1, dp))
            return dp[ind][target] = true;
        if(helper(nums, target, ind + 1, dp))
            return dp[ind][target] = true;
        
        return dp[ind][target] = false;
    }

    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for(int num : nums)
            sum += num;
        
        if(sum % 2 != 0) return false;
        
        int target = sum / 2;
        vector<vector<int>> dp(n, vector<int> (target + 1, -1)); // Initialize with -1
        return helper(nums, target, 0, dp);
    }
};


//Bottom Up 

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for(int num : nums)
            sum += num;
        
        if(sum % 2 != 0) return false;
        
        int target = sum / 2;
        vector<vector<int>> dp(n+1, vector<int> (target + 1, false)); // Initialize with -1
        //initial conditions
        //1st col - target 0 but there are elements  
        for(int i=0;i<=n;i++)
            dp[i][0] = true;
        //1st row - target not 0 and no elements 
        for(int j=1;j<=target;j++)
            dp[0][j] = false;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=target;j++){
                //inc
                if(nums[i-1]<=j)
                    dp[i][j]=dp[i-1][j-nums[i-1]];
                //exc
                dp[i][j] = dp[i][j] || dp[i-1][j];
            }
        }
        return dp[n][target];
    }
};


//Space Optimization 

class Solution {
public:
    //Space Optimization 
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for(int num : nums)
            sum += num;
        
        if(sum % 2 != 0) return false;
        
        int target = sum / 2;
        vector<int> prev (target+1,false);
        vector<int> curr (target+1,false);
        //initial conditions
        prev[0]=true; curr[0]=true;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=target;j++){
                //inc
                if(nums[i-1]<=j)
                    curr[j]=prev[j-nums[i-1]];
                //exc
                curr[j] = curr[j] || prev[j];
            }
            prev = curr;
        }
        return curr[target];
    }
};


