//Recursive (TLE)

class Solution {
public:
    bool helper(vector<int>& nums, int target, int ind){
        if(ind>=nums.size()) return target==0;
        
        if(helper(nums,target-nums[ind],ind+1)&&nums[ind]<=target)
            return true;
        if(helper(nums,target,ind+1))
            return true;
        return false;
    }
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for(int num: nums)
            sum+=num;
        
        if(sum%2!=0) return false;
        int target = sum/2;

        return helper(nums,target,0);
    }
};


//Memoization 

class Solution {
public:
    bool helper(vector<int>& nums, int target, int ind, vector<vector<int>>& dp){
        if(ind >= nums.size()) return (target == 0);

        if(dp[ind][target] != -1) // Check if already computed
            return dp[ind][target];
        
        if(nums[ind] <= target && helper(nums, target - nums[ind], ind + 1, dp))
            return dp[ind][target] = true;
        if(helper(nums, target, ind + 1, dp))
            return dp[ind][target] = true;
        
        return dp[ind][target] = false;
    }

    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for(int num : nums)
            sum += num;
        
        if(sum % 2 != 0) return false;
        
        int target = sum / 2;
        vector<vector<int>> dp(n, vector<int> (target + 1, -1)); // Initialize with -1
        return helper(nums, target, 0, dp);
    }
};
