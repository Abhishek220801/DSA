//Recursive (TLE)

//0->n
class Solution {
public:
    int helper(string &s1, string &s2, int ind1, int ind2){
        if(ind1>=s1.length()||ind2>=s2.length()) return 0;

        //if same chars found 
        if(s1[ind1]==s2[ind2]) return 1+helper(s1,s2,ind1+1,ind2+1);
        //if chars are different 
        return max(helper(s1,s2,ind1+1,ind2),helper(s1,s2,ind1,ind2+1));
    }
    int longestCommonSubsequence(string text1, string text2) {
        return helper(text1,text2,0,0);
    }
};
//n->0
class Solution {
public:
    int helper(string &s1, string &s2, int ind1, int ind2){
        if(ind1<0||ind2<0) return 0;

        //if same chars found 
        if(s1[ind1]==s2[ind2]) return 1+helper(s1,s2,ind1-1,ind2-1);
        //if chars are different 
        return max(helper(s1,s2,ind1-1,ind2),helper(s1,s2,ind1,ind2-1));
    }

//Memoization 
class Solution {
public:
    int helper(string &s1, string &s2, int ind1, int ind2, vector<vector<int>>& dp){
        if(ind1<0||ind2<0) return 0;

        if(dp[ind1][ind2]!=-1) return dp[ind1][ind2];

        //if same chars found 
        if(s1[ind1]==s2[ind2]) return dp[ind1][ind2]=1+helper(s1,s2,ind1-1,ind2-1,dp);
        //if chars are different 
        return dp[ind1][ind2]=max(helper(s1,s2,ind1-1,ind2,dp),helper(s1,s2,ind1,ind2-1,dp));
    }
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> dp(text1.length(), vector<int> (text2.length(), -1));
        return helper(text1,text2,text1.length()-1,text2.length()-1,dp);
    }
};
    int longestCommonSubsequence(string text1, string text2) {
        return helper(text1,text2,text1.length()-1,text2.length()-1);
    }
};
