class Solution {
public:
    void helper(string& s, int ind, vector<string>& curr, vector<vector<string>>& res, vector<vector<bool>> &dp){
        if(ind>=s.length()){
            res.push_back(curr);
            return;
        }
        //patitioning after i 
        for(int i=ind;i<s.length();i++){
            if(dp[ind][i]){
                curr.push_back(s.substr(ind,i-ind+1));
                helper(s,i+1,curr,res,dp);
                curr.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s) {
        int n = s.length();
        vector<vector<bool>> dp(n, vector<bool> (n, false));

        for(int l=1;l<=n;l++){
            for(int i=0;i<=n-l;i++){
                int j = i+l-1;
                //single elt
                if(i==j) dp[i][j] = true;
                //multiple elts
                else if(s[i]==s[j] && (j==i+1 || dp[i+1][j-1]))
                    dp[i][j] = true;
            }
        }
        vector<string> curr;
        vector<vector<string>> res;
        helper(s,0,curr,res,dp);
        return res;
    }
};
